#!/bin/sh

mkdir -p /tmp
swupdate_enabled() {
    if [ -f /tmp/swupdate_enabled ]; then
        return 0
    elif [ -n "$bootparam_swupdate" ]; then
        return 0
    else
        # swupdate not enabled. Set variable so its enabled in the final slot.
        echo "yes" > /tmp/swupdate_enabled
        return 1
    fi
}

umount_disk() {
    # get the primary disk
    for i in `cat /proc/cmdline`; do
        [[ $i == primary-disk=* ]] && dev="${i: -1}"
    done
    [ -b "$dev" ] || dev=$(findfs LABEL=boot || findfs LABEL=root || findfs LABEL=rootfs); dev=$(echo $dev | sed -r 's/p?[0-9]*$//')
    [ -b "$dev" ] || (echo "not a block device: $dev" && return 1)
    # unmount everything on the disk
    umount -f /boot; umount -f /rootfs; umount -f /storage; umount -f /root;
}

run_swupd() {
    . /etc/default/swupdate
    . /usr/bin/swupdate-env "recovery"
    dl_url="https://github.com/VideologyInc/scailx_yocto/releases/download/v0.2-kirkstone/scailx-image-swupdate-ml-${hardware}.swu"
    swupdate -v -H ${hardware}:1.0 -f /etc/swupdate.cfg "$selection" -d "--url $dl_url" -p 'sync; echo b >/proc/sysrq-trigger'
    swupdate -v -H ${hardware}:1.0 -f /etc/swupdate.cfg "$selection" -w "" -p 'sync; echo b >/proc/sysrq-trigger'
}

swupdate_run() {
    # if we're in an error condition, format the disk
    [ -f "/tmp/initrd_error" ] && echo "boot error. updating from recovery"

    # get dhcp lease
    udhcpc &
    umount_disk
    run_swupd
}
