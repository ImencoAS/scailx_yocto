Videology Yocto builder
=======================

# Build

- Clone:

```
git clone --recurse-submodules git@github.com:VideologyInc/karo_yocto.git
cd karo_yocto
```
- Enter the build environment:
```
./scripts/docker_env.sh
source videology-setup-env
```
- build the image with:

```
bitbake karo-image-basler
```

## Install built image:
- imstall NXP uuu utility from [github.com/NXPmicro/mfgtools](https://github.com/NXPmicro/mfgtools)
- pull the boot mode pin to 3.3V and reset the board to enter firmware loader mode.
- use UUU to load the image:
```
sudo uuu /path/to/build/tmp/deploy/images/mx8-camera/karo-image-basler
```


## Update to the latest version
```
git pull --recurse-submodules
./scripts/submod_reset.sh all
```

## Run from NFT/TFTP
Its possible to run the images directly from a development computer over the network. A docker-compose file was generated to host a TFTP and NFS server suing docker.

### Computer
1. create a folder to hold the rootfs for the device.
2. open the file **scripts/docker-compose.yml**, and edit the path to point to the this rootfs folder.
3. install docker-compose and run `docker-compose up -d` from the scripts folder. This will create and start 2 docker instances, one hosting an NFS server, and another serving the TFTP server. This command need not be run again. The instances will start at startup of the development computer in future.
4. Should you wish to stop them, enter `docker-compose down` from the scripts folder.
5. copy the contents of the rootfs into the NFS folder:
`sudo tar --same-owner -pxjf <path/to/rootfs/tarball.tar.bz2> -C <path/to/nfs/root/directory/>`
    for example:
```
sudo rm -rf /work/karo/build/tmp/deploy/images/nfs-rootfs/*
sudo tar --same-owner -pxjf /work/karo/build/tmp/deploy/images/mx8-camera/karo-image-ml-mx8-camera.tar.bz2 -C /work/karo/build/tmp/deploy/images/nfs-rootfs
```

### Device
Edit the device's uboot variables to point to the applicable server.
```
setenv boot_mode nfs
setenv serverip <development computer IP address on the network>
saveenv
reset
```
