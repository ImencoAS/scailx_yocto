Videology Yocto builder
=======================

# Build

## Prerequisites

- Linux PC (tested on `Ubuntu 22.04 LTS`) with [default host requirements](https://docs.yoctoproject.org/4.0.5/brief-yoctoprojectqs/index.html#build-host-packages)
- or use [docker](https://docs.docker.com/install/linux/docker-ce/ubuntu/)
- [kas](https://kas.readthedocs.io/): `sudo pip3 install kas`

## Native Linux Build

```
# Clone
git clone git@github.com:VideologyInc/scailx_yocto.git
cd scailx_yocto

# build using kas
kas build scail.yaml
```
To enter the bitbake environment to perform other bitbake tasks, use `kas shell`:
```
kas shell scailx.yaml
bitbake linux-imx scailx-image <or some other recipe>
```

## Docker Build
Kas comes with its own docker image to perform predictable containerised builds.
Make sure Docker is installed and properly configured for your host system. You may have to switch the storage driver away from legacy aufs, see Docker documentation, if kas warns about this.

```
# Clone
git clone git@github.com:VideologyInc/scailx_yocto.git
cd scailx_yocto

# build using kas-container
kas-container build scail.yaml
```
To enter the bitbake environment to perform other bitbake tasks, use `kas shell`:
```
kas-container shell scailx.yaml
bitbake linux-imx scailx-image <or some other recipe>
```


## Update to the latest version
```
git stash
git switch -C master origin/master
kas build --force-checkout scailx.yaml
```

## Run from NFT/TFTP
Its possible to run the images directly from a development computer over the network. A docker-compose file was generated to host a TFTP and NFS server suing docker.

### Computer
1. create a folder to hold the rootfs for the device.
2. open the file **scripts/docker-compose.yml**, and edit the path to point to the this rootfs folder.
3. install docker-compose and run `docker-compose up -d` from the scripts folder. This will create and start 2 docker instances, one hosting an NFS server, and another serving the TFTP server. This command need not be run again. The instances will start at startup of the development computer in future.
4. Should you wish to stop them, enter `docker-compose down` from the scripts folder.
5. copy the contents of the rootfs into the NFS folder:
`sudo tar --same-owner -pxjf <path/to/rootfs/tarball.tar.bz2> -C <path/to/nfs/root/directory/>`
    for example:
```
sudo rm -rf /work/karo/build/tmp/deploy/images/nfs-rootfs/*
sudo tar --same-owner -pxjf /work/karo/build/tmp/deploy/images/mx8-camera/karo-image-ml-mx8-camera.tar.bz2 -C /work/karo/build/tmp/deploy/images/nfs-rootfs
```

### Device
Edit the device's uboot variables to point to the applicable server.
```
setenv boot_mode nfs
setenv serverip <development computer IP address on the network>
saveenv
reset
```

## Experimental: CI build using [TuxSuite](https://docs.tuxsuite.com/)
Note that this requires a tuxsuite account secret to run.
```
# install tuxsuite
sudo pip3 install -U tuxsuite
# submit build to TuxSuite:
tuxsuite bake submit tuxsuite_config_scailx.json
```
